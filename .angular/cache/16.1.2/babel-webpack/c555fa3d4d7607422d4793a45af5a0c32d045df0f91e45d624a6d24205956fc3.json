{"ast":null,"code":"import _asyncToGenerator from \"/Users/hnaroserrano/vsProjects/gameinfowebsite-project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let GameViewComponent = class GameViewComponent {\n  constructor(route, clientAPI) {\n    this.route = route;\n    this.clientAPI = clientAPI;\n    this.genreIDs = [];\n    this.coverUrl = \"\";\n    this.platformNames = [];\n    this.websites = [];\n    this.defaultImage = \"../../../assets/nodataImage.png\";\n    this.genreNames = [];\n  }\n  checkCoverUrl(url) {\n    if (url) {\n      return url;\n    } else {\n      return this.defaultImage;\n    }\n  }\n  setUpGameViewData() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let querySubs = yield _this.route.queryParamMap.subscribe(value => {\n        _this.id = value.get(\"id\");\n      });\n      querySubs.unsubscribe();\n      // request more info here\n      // get gameinfo\n      yield _this.clientAPI.getsingleGameInfo(_this.id).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (body) {\n          let bodysubs = yield body.subscribe( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(function* (body) {\n              let results = Object.values(body);\n              //console.log(results[0]);\n              _this.genreIDs = results[0].genres;\n              _this.name = results[0].name;\n              _this.description = results[0].summary;\n              // get genre names\n              yield _this.clientAPI.getGenreNames(_this.genreIDs).then( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator(function* (data) {\n                  let subs = data.subscribe( /*#__PURE__*/function () {\n                    var _ref4 = _asyncToGenerator(function* (value) {\n                      _this.genreNames = Object.values(value);\n                      //console.log(this.genreNames.length);\n                      if (_this.genreNames) {\n                        subs.unsubscribe();\n                      }\n                    });\n                    return function (_x4) {\n                      return _ref4.apply(this, arguments);\n                    };\n                  }());\n                });\n                return function (_x3) {\n                  return _ref3.apply(this, arguments);\n                };\n              }());\n              //get cover\n              yield _this.clientAPI.getGameCover(_this.id).then( /*#__PURE__*/function () {\n                var _ref5 = _asyncToGenerator(function* (data) {\n                  let subs = yield data.subscribe(value => {\n                    let cover;\n                    cover = Object.values(value)[0];\n                    _this.coverUrl = cover.url;\n                    if (cover) {\n                      subs.unsubscribe();\n                    }\n                  });\n                });\n                return function (_x5) {\n                  return _ref5.apply(this, arguments);\n                };\n              }());\n              // get platforms name\n              yield _this.clientAPI.getPlatformNames(results[0].platforms).then( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator(function* (data) {\n                  let subs = yield data.subscribe( /*#__PURE__*/function () {\n                    var _ref7 = _asyncToGenerator(function* (value) {\n                      _this.platformNames = yield Object.values(value);\n                      if (_this.platformNames) {\n                        subs.unsubscribe();\n                      }\n                    });\n                    return function (_x7) {\n                      return _ref7.apply(this, arguments);\n                    };\n                  }());\n                });\n                return function (_x6) {\n                  return _ref6.apply(this, arguments);\n                };\n              }());\n              // get website names\n              yield _this.clientAPI.getsingleGameWebsites(_this.id).then( /*#__PURE__*/function () {\n                var _ref8 = _asyncToGenerator(function* (data) {\n                  let subs = yield data.subscribe( /*#__PURE__*/function () {\n                    var _ref9 = _asyncToGenerator(function* (value) {\n                      _this.websites = yield Object.values(value);\n                      if (_this.websites) {\n                        subs.unsubscribe();\n                      }\n                    });\n                    return function (_x9) {\n                      return _ref9.apply(this, arguments);\n                    };\n                  }());\n                });\n                return function (_x8) {\n                  return _ref8.apply(this, arguments);\n                };\n              }());\n              if (results) {\n                bodysubs.unsubscribe();\n              }\n            });\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  ngOnInit() {\n    var _this2 = this;\n    setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n      yield _this2.setUpGameViewData();\n    }), 500);\n  }\n};\nGameViewComponent = __decorate([Component({\n  selector: 'app-game-view',\n  templateUrl: './game-view.component.html',\n  styleUrls: ['./game-view.component.css']\n})], GameViewComponent);","map":{"version":3,"names":["Component","GameViewComponent","constructor","route","clientAPI","genreIDs","coverUrl","platformNames","websites","defaultImage","genreNames","checkCoverUrl","url","setUpGameViewData","_this","_asyncToGenerator","querySubs","queryParamMap","subscribe","value","id","get","unsubscribe","getsingleGameInfo","then","_ref","body","bodysubs","_ref2","results","Object","values","genres","name","description","summary","getGenreNames","_ref3","data","subs","_ref4","_x4","apply","arguments","_x3","getGameCover","_ref5","cover","_x5","getPlatformNames","platforms","_ref6","_ref7","_x7","_x6","getsingleGameWebsites","_ref8","_ref9","_x9","_x8","_x2","_x","ngOnInit","_this2","setTimeout","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/hnaroserrano/vsProjects/gameinfowebsite-project/src/app/pages/game-view/game-view.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { WebBackendService } from 'src/app/services/web-backend.service';\n\n@Component({\n  selector: 'app-game-view',\n  templateUrl: './game-view.component.html',\n  styleUrls: ['./game-view.component.css']\n})\nexport class GameViewComponent implements OnInit {\n  id: any;\n  genreIDs: number[] = [];\n  name: any;\n  coverUrl: string = \"\";\n  platformNames: any[] = [];\n  description: any;\n  websites: any[] = [];\n\n  defaultImage: string = \"../../../assets/nodataImage.png\";\n\n  genreNames: any[] = [];\n  constructor(private route: ActivatedRoute,private clientAPI: WebBackendService){}\n  checkCoverUrl(url: string) {\n    if (url) {\n      return url;\n    } else {\n      return this.defaultImage;\n    }\n  }\n  async setUpGameViewData() {\n    let querySubs = await this.route.queryParamMap.subscribe(value => {\n      this.id = value.get(\"id\");\n    });\n    querySubs.unsubscribe();\n        // request more info here\n    // get gameinfo\n    await this.clientAPI.getsingleGameInfo(this.id)\n    .then(async (body) => {\n      let bodysubs = await body.subscribe( async (body) => {\n        let results = Object.values(body);\n        //console.log(results[0]);\n        this.genreIDs = results[0].genres;\n        this.name = results[0].name;\n        this.description = results[0].summary;\n        // get genre names\n        await this.clientAPI.getGenreNames(this.genreIDs)\n        .then( async (data) => {\n          let subs = data.subscribe(async (value) => {\n            this.genreNames = Object.values(value);\n            //console.log(this.genreNames.length);\n            if (this.genreNames) {\n              subs.unsubscribe();\n            }\n          })\n        })\n        //get cover\n        await this.clientAPI.getGameCover(this.id)\n        .then( async (data) => {\n          let subs = await data.subscribe((value) => {\n            let cover: any;\n            cover = Object.values(value)![0];\n            this.coverUrl = cover.url;\n            if (cover) {\n              subs.unsubscribe();\n            }\n          })\n        })\n        // get platforms name\n        await this.clientAPI.getPlatformNames(results[0].platforms)\n        .then(async (data) => {\n          let subs = await data.subscribe( async (value) => {\n            this.platformNames = await Object.values(value);\n            if(this.platformNames) {\n              subs.unsubscribe();\n            }\n          })\n        })\n        // get website names\n        await this.clientAPI.getsingleGameWebsites(this.id)\n        .then(async (data) => {\n          let subs = await data.subscribe( async (value) => {\n            this.websites = await Object.values(value);\n            if (this.websites) {\n              subs.unsubscribe();\n            }\n          })\n        })\n\n        if(results) {\n          bodysubs.unsubscribe();\n        }\n      })\n    })\n  }\n\n  ngOnInit(): void {\n    setTimeout( async () => {\n      await this.setUpGameViewData();\n    },500);\n  }\n}\n"],"mappings":";;AAAA,SAASA,SAAS,QAAgB,eAAe;AAS1C,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAY5BC,YAAoBC,KAAqB,EAASC,SAA4B;IAA1D,KAAAD,KAAK,GAALA,KAAK;IAAyB,KAAAC,SAAS,GAATA,SAAS;IAV3D,KAAAC,QAAQ,GAAa,EAAE;IAEvB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,aAAa,GAAU,EAAE;IAEzB,KAAAC,QAAQ,GAAU,EAAE;IAEpB,KAAAC,YAAY,GAAW,iCAAiC;IAExD,KAAAC,UAAU,GAAU,EAAE;EAC0D;EAChFC,aAAaA,CAACC,GAAW;IACvB,IAAIA,GAAG,EAAE;MACP,OAAOA,GAAG;KACX,MAAM;MACL,OAAO,IAAI,CAACH,YAAY;;EAE5B;EACMI,iBAAiBA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACrB,IAAIC,SAAS,SAASF,KAAI,CAACX,KAAK,CAACc,aAAa,CAACC,SAAS,CAACC,KAAK,IAAG;QAC/DL,KAAI,CAACM,EAAE,GAAGD,KAAK,CAACE,GAAG,CAAC,IAAI,CAAC;MAC3B,CAAC,CAAC;MACFL,SAAS,CAACM,WAAW,EAAE;MACnB;MACJ;MACA,MAAMR,KAAI,CAACV,SAAS,CAACmB,iBAAiB,CAACT,KAAI,CAACM,EAAE,CAAC,CAC9CI,IAAI;QAAA,IAAAC,IAAA,GAAAV,iBAAA,CAAC,WAAOW,IAAI,EAAI;UACnB,IAAIC,QAAQ,SAASD,IAAI,CAACR,SAAS;YAAA,IAAAU,KAAA,GAAAb,iBAAA,CAAE,WAAOW,IAAI,EAAI;cAClD,IAAIG,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACL,IAAI,CAAC;cACjC;cACAZ,KAAI,CAACT,QAAQ,GAAGwB,OAAO,CAAC,CAAC,CAAC,CAACG,MAAM;cACjClB,KAAI,CAACmB,IAAI,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAACI,IAAI;cAC3BnB,KAAI,CAACoB,WAAW,GAAGL,OAAO,CAAC,CAAC,CAAC,CAACM,OAAO;cACrC;cACA,MAAMrB,KAAI,CAACV,SAAS,CAACgC,aAAa,CAACtB,KAAI,CAACT,QAAQ,CAAC,CAChDmB,IAAI;gBAAA,IAAAa,KAAA,GAAAtB,iBAAA,CAAE,WAAOuB,IAAI,EAAI;kBACpB,IAAIC,IAAI,GAAGD,IAAI,CAACpB,SAAS;oBAAA,IAAAsB,KAAA,GAAAzB,iBAAA,CAAC,WAAOI,KAAK,EAAI;sBACxCL,KAAI,CAACJ,UAAU,GAAGoB,MAAM,CAACC,MAAM,CAACZ,KAAK,CAAC;sBACtC;sBACA,IAAIL,KAAI,CAACJ,UAAU,EAAE;wBACnB6B,IAAI,CAACjB,WAAW,EAAE;;oBAEtB,CAAC;oBAAA,iBAAAmB,GAAA;sBAAA,OAAAD,KAAA,CAAAE,KAAA,OAAAC,SAAA;oBAAA;kBAAA,IAAC;gBACJ,CAAC;gBAAA,iBAAAC,GAAA;kBAAA,OAAAP,KAAA,CAAAK,KAAA,OAAAC,SAAA;gBAAA;cAAA,IAAC;cACF;cACA,MAAM7B,KAAI,CAACV,SAAS,CAACyC,YAAY,CAAC/B,KAAI,CAACM,EAAE,CAAC,CACzCI,IAAI;gBAAA,IAAAsB,KAAA,GAAA/B,iBAAA,CAAE,WAAOuB,IAAI,EAAI;kBACpB,IAAIC,IAAI,SAASD,IAAI,CAACpB,SAAS,CAAEC,KAAK,IAAI;oBACxC,IAAI4B,KAAU;oBACdA,KAAK,GAAGjB,MAAM,CAACC,MAAM,CAACZ,KAAK,CAAE,CAAC,CAAC,CAAC;oBAChCL,KAAI,CAACR,QAAQ,GAAGyC,KAAK,CAACnC,GAAG;oBACzB,IAAImC,KAAK,EAAE;sBACTR,IAAI,CAACjB,WAAW,EAAE;;kBAEtB,CAAC,CAAC;gBACJ,CAAC;gBAAA,iBAAA0B,GAAA;kBAAA,OAAAF,KAAA,CAAAJ,KAAA,OAAAC,SAAA;gBAAA;cAAA,IAAC;cACF;cACA,MAAM7B,KAAI,CAACV,SAAS,CAAC6C,gBAAgB,CAACpB,OAAO,CAAC,CAAC,CAAC,CAACqB,SAAS,CAAC,CAC1D1B,IAAI;gBAAA,IAAA2B,KAAA,GAAApC,iBAAA,CAAC,WAAOuB,IAAI,EAAI;kBACnB,IAAIC,IAAI,SAASD,IAAI,CAACpB,SAAS;oBAAA,IAAAkC,KAAA,GAAArC,iBAAA,CAAE,WAAOI,KAAK,EAAI;sBAC/CL,KAAI,CAACP,aAAa,SAASuB,MAAM,CAACC,MAAM,CAACZ,KAAK,CAAC;sBAC/C,IAAGL,KAAI,CAACP,aAAa,EAAE;wBACrBgC,IAAI,CAACjB,WAAW,EAAE;;oBAEtB,CAAC;oBAAA,iBAAA+B,GAAA;sBAAA,OAAAD,KAAA,CAAAV,KAAA,OAAAC,SAAA;oBAAA;kBAAA,IAAC;gBACJ,CAAC;gBAAA,iBAAAW,GAAA;kBAAA,OAAAH,KAAA,CAAAT,KAAA,OAAAC,SAAA;gBAAA;cAAA,IAAC;cACF;cACA,MAAM7B,KAAI,CAACV,SAAS,CAACmD,qBAAqB,CAACzC,KAAI,CAACM,EAAE,CAAC,CAClDI,IAAI;gBAAA,IAAAgC,KAAA,GAAAzC,iBAAA,CAAC,WAAOuB,IAAI,EAAI;kBACnB,IAAIC,IAAI,SAASD,IAAI,CAACpB,SAAS;oBAAA,IAAAuC,KAAA,GAAA1C,iBAAA,CAAE,WAAOI,KAAK,EAAI;sBAC/CL,KAAI,CAACN,QAAQ,SAASsB,MAAM,CAACC,MAAM,CAACZ,KAAK,CAAC;sBAC1C,IAAIL,KAAI,CAACN,QAAQ,EAAE;wBACjB+B,IAAI,CAACjB,WAAW,EAAE;;oBAEtB,CAAC;oBAAA,iBAAAoC,GAAA;sBAAA,OAAAD,KAAA,CAAAf,KAAA,OAAAC,SAAA;oBAAA;kBAAA,IAAC;gBACJ,CAAC;gBAAA,iBAAAgB,GAAA;kBAAA,OAAAH,KAAA,CAAAd,KAAA,OAAAC,SAAA;gBAAA;cAAA,IAAC;cAEF,IAAGd,OAAO,EAAE;gBACVF,QAAQ,CAACL,WAAW,EAAE;;YAE1B,CAAC;YAAA,iBAAAsC,GAAA;cAAA,OAAAhC,KAAA,CAAAc,KAAA,OAAAC,SAAA;YAAA;UAAA,IAAC;QACJ,CAAC;QAAA,iBAAAkB,EAAA;UAAA,OAAApC,IAAA,CAAAiB,KAAA,OAAAC,SAAA;QAAA;MAAA,IAAC;IAAA;EACJ;EAEAmB,QAAQA,CAAA;IAAA,IAAAC,MAAA;IACNC,UAAU,eAAAjD,iBAAA,CAAE,aAAW;MACrB,MAAMgD,MAAI,CAAClD,iBAAiB,EAAE;IAChC,CAAC,GAAC,GAAG,CAAC;EACR;CACD;AA3FYZ,iBAAiB,GAAAgE,UAAA,EAL7BjE,SAAS,CAAC;EACTkE,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACWnE,iBAAiB,CA2F7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}