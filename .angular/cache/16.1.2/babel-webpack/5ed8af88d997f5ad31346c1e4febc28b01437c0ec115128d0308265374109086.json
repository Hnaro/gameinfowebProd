{"ast":null,"code":"import _asyncToGenerator from \"/Users/hnaroserrano/vsProjects/gameinfowebsite-project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nexport let SelectionComponent = class SelectionComponent {\n  constructor(clientAPI, searchService) {\n    this.clientAPI = clientAPI;\n    this.searchService = searchService;\n    this.selectedIDS = new EventEmitter();\n    this.isSelectionActive = false;\n    this.selectedids = [];\n    this.genres = [];\n    //searchService.setSearchedGenres = [{id: 1, name:\"test1\"},{id: 2, name:\"test2\"}]\n  }\n\n  ngOnInit() {\n    this.setUpGenreIDs();\n  }\n  setUpGenreIDs() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // client\n      _this.clientAPI.getAllGenreNames().then(data => {\n        let subs = data.subscribe(value => {\n          _this.genres = Object.values(value);\n          console.log(_this.genres);\n        });\n      });\n      //console.log(this.searchService.getSearchedGenres);\n    })();\n  }\n  // gets the selected ids and throw it back to search bar\n  // each button for selecting ids will have this\n  selectID(ids) {\n    //  store selectedIds\n    this.selectedids.push(ids);\n  }\n  showSelections() {\n    if (this.isSelectionActive) {\n      // emit data here\n      console.log(this.selectedids);\n      //this.selectedIDS.emit(this.selectedids)\n      this.isSelectionActive = false;\n      return;\n    }\n    this.isSelectionActive = true;\n  }\n};\n__decorate([Output()], SelectionComponent.prototype, \"selectedIDS\", void 0);\nSelectionComponent = __decorate([Component({\n  selector: 'app-selection',\n  templateUrl: './selection.component.html',\n  styleUrls: ['./selection.component.css']\n})], SelectionComponent);","map":{"version":3,"names":["Component","EventEmitter","Output","SelectionComponent","constructor","clientAPI","searchService","selectedIDS","isSelectionActive","selectedids","genres","ngOnInit","setUpGenreIDs","_this","_asyncToGenerator","getAllGenreNames","then","data","subs","subscribe","value","Object","values","console","log","selectID","ids","push","showSelections","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/hnaroserrano/vsProjects/gameinfowebsite-project/src/app/components/selection/selection.component.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { SearchService } from 'src/app/services/search.service';\nimport { WebBackendService } from 'src/app/services/web-backend.service';\n\n@Component({\n  selector: 'app-selection',\n  templateUrl: './selection.component.html',\n  styleUrls: ['./selection.component.css']\n})\nexport class SelectionComponent implements OnInit {\n  @Output() selectedIDS = new EventEmitter;\n\n  isSelectionActive: boolean = false; \n  \n  selectedids: number[];\n  genres: any[];\n  constructor(private clientAPI: WebBackendService, private searchService: SearchService) {\n    this.selectedids = [];\n    this.genres = [];\n    //searchService.setSearchedGenres = [{id: 1, name:\"test1\"},{id: 2, name:\"test2\"}]\n  }\n  ngOnInit(): void {\n    this.setUpGenreIDs();\n  }\n  async setUpGenreIDs() {\n    // client\n    this.clientAPI.getAllGenreNames().then(data => {\n      let subs = data.subscribe(value => {\n        this.genres = Object.values(value);\n        console.log(this.genres);\n      })\n    })\n    //console.log(this.searchService.getSearchedGenres);\n  }\n  // gets the selected ids and throw it back to search bar\n  // each button for selecting ids will have this\n  selectID(ids: number){\n    //  store selectedIds\n    this.selectedids.push(ids);\n  }\n  showSelections() {\n    if (this.isSelectionActive) {\n      // emit data here\n      console.log(this.selectedids);\n      //this.selectedIDS.emit(this.selectedids)\n      this.isSelectionActive = false;\n      return;\n    }\n    this.isSelectionActive = true;\n  }\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,YAAY,EAAUC,MAAM,QAAQ,eAAe;AAShE,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAO7BC,YAAoBC,SAA4B,EAAUC,aAA4B;IAAlE,KAAAD,SAAS,GAATA,SAAS;IAA6B,KAAAC,aAAa,GAAbA,aAAa;IAN7D,KAAAC,WAAW,GAAG,IAAIN,YAAY,CAAZ,CAAY;IAExC,KAAAO,iBAAiB,GAAY,KAAK;IAKhC,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB;EACF;;EACAC,QAAQA,CAAA;IACN,IAAI,CAACC,aAAa,EAAE;EACtB;EACMA,aAAaA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACjB;MACAD,KAAI,CAACR,SAAS,CAACU,gBAAgB,EAAE,CAACC,IAAI,CAACC,IAAI,IAAG;QAC5C,IAAIC,IAAI,GAAGD,IAAI,CAACE,SAAS,CAACC,KAAK,IAAG;UAChCP,KAAI,CAACH,MAAM,GAAGW,MAAM,CAACC,MAAM,CAACF,KAAK,CAAC;UAClCG,OAAO,CAACC,GAAG,CAACX,KAAI,CAACH,MAAM,CAAC;QAC1B,CAAC,CAAC;MACJ,CAAC,CAAC;MACF;IAAA;EACF;EACA;EACA;EACAe,QAAQA,CAACC,GAAW;IAClB;IACA,IAAI,CAACjB,WAAW,CAACkB,IAAI,CAACD,GAAG,CAAC;EAC5B;EACAE,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACpB,iBAAiB,EAAE;MAC1B;MACAe,OAAO,CAACC,GAAG,CAAC,IAAI,CAACf,WAAW,CAAC;MAC7B;MACA,IAAI,CAACD,iBAAiB,GAAG,KAAK;MAC9B;;IAEF,IAAI,CAACA,iBAAiB,GAAG,IAAI;EAC/B;CACD;AAxCWqB,UAAA,EAAT3B,MAAM,EAAE,C,sDAAgC;AAD9BC,kBAAkB,GAAA0B,UAAA,EAL9B7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACW7B,kBAAkB,CAyC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}